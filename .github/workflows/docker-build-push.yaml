name: docker-build-push

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'
jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.date.outputs.value }}
      branch_tag: ${{ steps.branch.outputs.value }}
      tag: ${{ steps.tags.outputs.value }}
      dockerhub_repo: ${{steps.dockerhub.outputs.repo}}
      dockerhub_image:  ${{steps.dockerhub.outputs.image}}
    steps:
      - 
        uses: actions/checkout@v2
      - 
        name: Read setup.yaml file
        run: |
          echo 'SETUP_YAML<<EOF' >> $GITHUB_ENV
          cat setup.yaml >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          cat $GITHUB_ENV
      - 
        name: show yaml content
        run: |
          echo '${{env.SETUP_YAML}}'
          echo '${{fromJson(env.SETUP_YAML).dockerhub_repo}}'
          echo '${{fromJson(env.SETUP_YAML).dockerhub_image}}'
      - 
        name: parse setup yaml 
        id: dockerhub
        run: |
          echo  "::set-output name=repo::${{fromJson(env.SETUP_YAML).dockerhub_repo}}"
          echo  "::set-output name=image::${{fromJson(env.SETUP_YAML).dockerhub_image}}"
      - 
        name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      -   
        name: Get current date
        id: date
        run: echo "::set-output name=value::$(date +'%Y-%m-%d')"
      - 
        name: Get Branch tag
        id: branch
        run: echo "::set-output name=value::${{steps.dockerhub.output.repo}}/${{steps.dockerhub.output.image}}:${{steps.date.outputs.value}}_${{env.GITHUB_REF_SLUG}}"
      - 
        name: Get Latest tag
        id: latest
        run: echo "::set-output name=value::${{steps.dockerhub.output.repo}}/${{steps.dockerhub.output.image}}:latest"
      - 
        uses: haya14busa/action-cond@v1
        id: tags
        with:
          cond: ${{ env.GITHUB_REF_SLUG == 'main' }}
          if_true: ${{env.branch_tag}}, ${{env.latest_tag}}
          if_false: ${{env.branch_tag}}
        env:
          branch_tag: ${{steps.branch.outputs.value}}
          latest_tag: ${{steps.latest.outputs.value}}
  build_docker:
    needs: variables
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Get hash key for cache
        id: hash
        uses: theowenyoung/folder-hash@v2.0.1
        with:
          path: installation
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ steps.hash.outputs.hash }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Show variables
        run: |
          echo date = ${{ needs.variables.outputs.date }}
          echo tags = ${{ needs.variables.outputs.tag }}
          echo branch = ${{ needs.variables.outputs.branch_tag }}
          echo hash = ${{ steps.hash.outputs.hash }}
          echo github.workspace = ${{ github.workspace }}
      -
        name: Build and push branch
        uses: docker/build-push-action@v2
        with:
          context: installation
          push: true
          build-args: |
            GITHUB_PAT=${{ secrets.PAT_GITHUB }} 
          tags: ${{ needs.variables.outputs.tag }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,mode=max,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  test-pipeline:
    needs: ["variables","build_docker"]
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: list files
        run: ls -R ${{ github.workspace }}
      -
        name: test fasta to vcf
        uses: yfarjoun/docker-run-action@yf_optional_quote_input
        with:
          image: ${{ needs.variables.outputs.branch_tag }}
          options: -v ${{ github.workspace }}/test:/app/local
          script_prefix: ""
          shell: ""
          quote_argument: false
          run: local/samples.fasta local/result
      - 
        name: list files
        run: ls -R ${{ github.workspace }}/test
      - 
        name: test equality with expected 
        run: diff <( grep -v '##msa2vcf.meta' ${{ github.workspace }}/test/result.vcf) <( grep -v '##msa2vcf.meta' ${{ github.workspace }}/test/samples_expected.vcf)

        

 
 